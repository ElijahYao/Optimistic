Optimistic Admin

1. startNewEpoch 开启下一交易周期。 (第一次开始交易时调用) 包括
    1.1. calculateTraderProfits 结算当前周期 trader 的期权利润。
    1.2. handleSettlement 结算当前交易周期 investors 的利润。
    1.3. handleDepositRequest 处理下一个周期的投资请求。

2. reloadNewEpoch, 开启一个新的交易周期, 第二次之后调用。


traders:

1. buy 购买期权  
    
   样例: 1670244489,130800000000,true,1,730000,50 

   注意: strikeTime 的时间限制, buyPrice 模 10000 要等于 0. 
    
2. sell 赎回期权
    
   样例: 1,0,670000

         epochId, oderIndex, sellPrice

         按照 sellPrice 赎回第 epochId 伦的第 orderIndex 个期权。

lp investors

1. withdraw，提交提款请求，investorWithDraw, _amount = UDSC 数量, 例如 1000 
2. deposit, 提交存款请求，investorDeposit, _amount = UDSC 数量, 例如 1000 
3. 真正的提款，从合约里面把钱提出来，investorActualWithDraw,   _amount = UDSC 数量, 例如 1000 


Section1 交易者首页: 

展示的数据:

    1. 获取当前交易周期 ID: epochId
    2. 当前交易周期周期价格区间: [minStrikePrice, maxStrikePrice], uint / 10^8 = 真实的 USDC 价格
    3. 当前交易周期结算时间区间: [curEpochStartTime, curEpochEndTime].
    4. K 线图, 看下能不能复用简易期权 ETH 的 K 线。
    5. 当前 wallet 的 USDC 数量。
    6. 当前 wallet 已实现利润, 待提取: 调用 contract 中 traderProfitPool[msg.sender]。

用户交互: 

    1. 购买期权调用 buy 方法:

        function buy(uint strikeTime, int strikePrice, bool optionType, uint productEpochId, int buyPrice, int _amount).

        strikeTime: 结束时间, 暂时直接传当前的 curEpochEndTime。
        strikePrice: 做一个滑动窗口，用户可以在 [minStrikePrice, maxStrikePrice] 随便选，必须是整数。
        optionType, CALL 是 true, PUT 是 false 
        produtepochId: 当前的 epochId, 前端存一个 epochId, 定期刷一下。
        buyPrice: 购买期权的价格, 前端随机一个 5 - 100 的整数 * 10^4 就行, 这个计算公式后续会提供给前端, 需要读一个链上数据。
        _amount: 使用的 USDC 数量。


Section2 LP投资人界面: 

展示的数据:

    1. 获取当前交易周期 ID: epochId
    2. 交易周期结算时间: curEpochEndTime
    3. invest History 

用户交互

    1. 展示当前的总资金池大小. 
    2. 展示当前用户投资的资金大小。
    3. withdraw 提款, 调用 investorWithDraw 。
    4. deposit 提款, 调用 investorDeposit。
    5. 在 withdraw 和 deposit 可以通过滑动计算投资后份额是多少。
    

Section3 历史仓位。
    
    1. TODO 需要提供个 API
    

Section4 当前持仓。

    1. traderOptionOrders[msg.sender][epochId]
