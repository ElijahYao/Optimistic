v3 部署地址:
    部署网络: Georli 测试网络
    Optimistic: 0xbd9D22C75bf309A6AbF1B6a4080DF8e686d6Fc8b
    USDCToken: 0x07865c6E87B9F70255377e024ace6630C1Eaa37F
    Oracle: 0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e


v4 部署地址:

    部署网络: Arbitrum 测试网络
    Optimistic: 
    USDCToken: 
    Oracle: 0x62CAe0FA2da220f43a51F86Db2EDb36DcA9A5A08

traders:
    1. 购买期权 traderBuy(uint strikeTime, int strikePrice, bool optionType, uint productEpochId, int buyPrice, int _amount)

        参数说明: 
            strikeTime: 行权时间戳
            strikePrice: 行权价格, 真实价格 * 10^8, 必须是 10^8 的倍数
            optionType: 期权类型, true 是 CALL, false 是 PUT
            productEpochId: 购买期权的 epochId, 主要是为了在合约里校验当前 epochId 是否等于请求的 productEpochId, 以防出问题。
            buyPrice: 购买的价格, 真实价格 * 10^6, 必须是 10^4 的倍数, 即真实价格最小计数单位 = 0.01
            _amount: USDC 数量, 直接传真实值
        
        样例: 
            购买 CALL 期权, 行权价格 = 1308, 当前 epochId = 1, 价格 = 0.73, 花费 = 50 USDC
                1670300700,130800000000,true,1,730000,50

            购买 PUT 期权, 行权价格 = 1204, 当前 epochId = 1, 价格 = 0.89, 花费 = 100 USDC  
                1670300800,120400000000,false,1,890000,100

        注意: 
            strikeTime 的时间限制, buyPrice 模 10000 要等于 0。

    2. 赎回期权 traderSell(uint productEpochId, uint orderIndex, int sellPrice) 

       参数说明: 
            productEpochId: 同上, 赎回期权的 epochId, 主要是为了在合约里校验当前 epochId 是否等于请求的 productEpochId, 以防出问题。
            orderIndex: 当前交易周期 epochId 下用户赎回第几个 orderIndex。 
            sellPrice: 赎回的价格, 真实价格 * 10^6, 必须是 10^4 的倍数, 即真实价格最小计数单位 = 0.01

       样例: 

            售卖当前 epochId = 1, 第 0 个期权, 按照 0.67 USDC 的价格, 
                1,0,670000
             
       注意:
            这里只能在当前期权页面进行调用, 因为只有当前期权页面能读取到用户当前 epoch 的期权列表长度。

    3. 获取历史期权 getHistoryOptions() , returns OptionOrder[] memory
    4. 获取当前期权 getCurOptions() , returns OptionOrder[] memory
    5. 获取 impliedVoltality, 直接调用 contract 中的 impliedVoltality, 是 public 的变量
    6. 获取当前能提款的数量, getCurValues(), returns int
    7. 用户提款 traderWithdraw(int _amount), _amount = USDC 数量, 例如 1000。

LP investors

    用户 API: 

        1. 提交提款请求 investorWithDraw(int _amount), _amount = UDSC 数量, 例如 1000。 
        2. 提交存款请求 investorDeposit(int _amount),  _amount = UDSC 数量, 例如 1000。
        3. 投资人提款，从合约里面把钱提出来, investorActualWithDraw(int amount), _amount = UDSC 数量, 例如 1000。

    展示数据获取: 

        1. 总资金池大小: 合约中 public 的 totalBalance。
        2. 当前用户投资的资金大小: liquidityPool[msg.sender]。
        3. 投资人当前能提款的数量: investorsWithdrawPool[msg.sender]。
        4. 当前 epochId, 同上 trader 部分
        5. 当前 epoch 结束时间, 同上 trader 部分。
